{
    "sourceFile": "Back-end/src/app/controllers/userController.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 46,
            "patches": [
                {
                    "date": 1633141361755,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1633141864351,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n        const token = jwt.sign({userId: user._id}, process.env.APP_SECRECT);\r\n        res.status(200).json({\r\n            status: 'success',\r\n            data: {token,\r\n-                  MSSV: user.mssv,\r\n+                  email: user.email,\r\n                   userName: user.username\r\n         }\r\n        })\r\n    } catch (error) {\r\n"
                },
                {
                    "date": 1633143369512,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,9 @@\n const User = require('../models/User');\r\n \r\n-const jwt = require('jsonwebtoken');\r\n+const jwt = require('jsonwebtoken')\r\n+const bcrypt = require('bcryptjs')\r\n \r\n- const bcrypt = require('bcryptjs');\r\n-\r\n exports.register = async  (req, res, next) => {\r\n    try {\r\n        const user = await User.create(req.body)\r\n        const token = jwt.sign({userId: user._id}, process.env.APP_SECRECT);\r\n"
                },
                {
                    "date": 1633158595630,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,44 +2,53 @@\n \r\n const jwt = require('jsonwebtoken')\r\n const bcrypt = require('bcryptjs')\r\n \r\n-exports.register = async  (req, res, next) => {\r\n-   try {\r\n-       const user = await User.create(req.body)\r\n-       const token = jwt.sign({userId: user._id}, process.env.APP_SECRECT);\r\n-       res.status(200).json({\r\n-           status: 'success',\r\n-           data: {token,\r\n-                  email: user.email,\r\n-                  userName: user.username\r\n-        }\r\n-       })\r\n-   } catch (error) {\r\n-      next(error)\r\n-   }\r\n-}\r\n+// exports.register = async  (req, res, next) => {\r\n+//    try {\r\n+//        const user = await User.create(req.body)\r\n+//        const token = jwt.sign({userId: user._id}, process.env.APP_SECRECT);\r\n+//        res.status(200).json({\r\n+//            status: 'success',\r\n+//            data: {token,\r\n+//                   email: user.email,\r\n+//                   userName: user.username\r\n+//         }\r\n+//        })\r\n+//    } catch (error) {\r\n+//       next(error)\r\n+//    }\r\n+// }\r\n \r\n-exports.login = async (req, res, next) => {\r\n-    try {\r\n-        const user = await User.findOne({email: req.body.email})\r\n-        if(!user){\r\n-            //Error:  Email is not correct\r\n-        }\r\n-        if(bcrypt.compareSync(req.body.password, user.password)){\r\n-            const token = jwt.sign({userId: user._id}, process.env.APP_SECRECT);\r\n-            res.status(200).json({\r\n-                status:'success',\r\n-                data:{\r\n-                    token,\r\n-                    email: user.email,\r\n-                    userName: user.username\r\n-                }\r\n-            })\r\n-        }else{\r\n-            //Error: password is not correct\r\n-        }\r\n-    } catch (error) {\r\n-        res.json(error)\r\n-    }\r\n+// exports.login = async (req, res, next) => {\r\n+//     try {\r\n+//         const user = await User.findOne({email: req.body.email})\r\n+//         if(!user){\r\n+//             //Error:  Email is not correct\r\n+//         }\r\n+//         if(bcrypt.compareSync(req.body.password, user.password)){\r\n+//             const token = jwt.sign({userId: user._id}, process.env.APP_SECRECT);\r\n+//             res.status(200).json({\r\n+//                 status:'success',\r\n+//                 data:{\r\n+//                     token,\r\n+//                     email: user.email,\r\n+//                     userName: user.username\r\n+//                 }\r\n+//             })\r\n+//         }else{\r\n+//             //Error: password is not correct\r\n+//         }\r\n+//     } catch (error) {\r\n+//         res.json(error)\r\n+//     }\r\n \r\n+// }\r\n+\r\n+\r\n+exports.register = (req, res, next){\r\n+    res.json('user register')\r\n }\r\n+\r\n+exports.login = (req, res, next){\r\n+    res.json('user login')\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1633158613080,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,11 +44,11 @@\n \r\n // }\r\n \r\n \r\n-exports.register = (req, res, next){\r\n+exports.register = (req, res, next)=>{\r\n     res.json('user register')\r\n }\r\n \r\n-exports.login = (req, res, next){\r\n+exports.login = (req, res, next)=>{\r\n     res.json('user login')\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1633158761699,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,53 +2,53 @@\n \r\n const jwt = require('jsonwebtoken')\r\n const bcrypt = require('bcryptjs')\r\n \r\n-// exports.register = async  (req, res, next) => {\r\n-//    try {\r\n-//        const user = await User.create(req.body)\r\n-//        const token = jwt.sign({userId: user._id}, process.env.APP_SECRECT);\r\n-//        res.status(200).json({\r\n-//            status: 'success',\r\n-//            data: {token,\r\n-//                   email: user.email,\r\n-//                   userName: user.username\r\n-//         }\r\n-//        })\r\n-//    } catch (error) {\r\n-//       next(error)\r\n-//    }\r\n-// }\r\n+exports.register = async  (req, res, next) => {\r\n+   try {\r\n+       const user = await User.create(req.body)\r\n+       const token = jwt.sign({userId: user._id}, process.env.APP_SECRECT);\r\n+       res.status(200).json({\r\n+           status: 'success',\r\n+           data: {token,\r\n+                  email: user.email,\r\n+                  userName: user.username\r\n+        }\r\n+       })\r\n+   } catch (error) {\r\n+      next(error)\r\n+   }\r\n+}\r\n \r\n-// exports.login = async (req, res, next) => {\r\n-//     try {\r\n-//         const user = await User.findOne({email: req.body.email})\r\n-//         if(!user){\r\n-//             //Error:  Email is not correct\r\n-//         }\r\n-//         if(bcrypt.compareSync(req.body.password, user.password)){\r\n-//             const token = jwt.sign({userId: user._id}, process.env.APP_SECRECT);\r\n-//             res.status(200).json({\r\n-//                 status:'success',\r\n-//                 data:{\r\n-//                     token,\r\n-//                     email: user.email,\r\n-//                     userName: user.username\r\n-//                 }\r\n-//             })\r\n-//         }else{\r\n-//             //Error: password is not correct\r\n\\ No newline at end of file\n-//         }\r\n-//     } catch (error) {\r\n-//         res.json(error)\r\n-//     }\r\n+exports.login = async (req, res, next) => {\r\n+    try {\r\n+        const user = await User.findOne({email: req.body.email})\r\n+        if(!user){\r\n+            //Error:  Email is not correct\r\n+        }\r\n+        if(bcrypt.compareSync(req.body.password, user.password)){\r\n+            const token = jwt.sign({userId: user._id}, process.env.APP_SECRECT);\r\n+            res.status(200).json({\r\n+                status:'success',\r\n+                data:{\r\n+                    token,\r\n+                    email: user.email,\r\n+                    userName: user.username\r\n+                }\r\n+            })\r\n+        }else{\r\n+            //Error: password is not correct\r\n+        }\r\n+    } catch (error) {\r\n+        res.json(error)\r\n+    }\r\n \r\n-// }\r\n+}\r\n \r\n \r\n-exports.register = (req, res, next)=>{\r\n-    res.json('user register')\r\n-}\r\n+// exports.register = (req, res, next)=>{\r\n+//     res.json('user register')\r\n+// }\r\n \r\n-exports.login = (req, res, next)=>{\r\n-    res.json('user login')\r\n-}\n+// exports.login = (req, res, next)=>{\r\n+//     res.json('user login')\r\n+// }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1633159168698,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,53 +2,61 @@\n \r\n const jwt = require('jsonwebtoken')\r\n const bcrypt = require('bcryptjs')\r\n \r\n-exports.register = async  (req, res, next) => {\r\n-   try {\r\n-       const user = await User.create(req.body)\r\n-       const token = jwt.sign({userId: user._id}, process.env.APP_SECRECT);\r\n-       res.status(200).json({\r\n-           status: 'success',\r\n-           data: {token,\r\n-                  email: user.email,\r\n-                  userName: user.username\r\n-        }\r\n-       })\r\n-   } catch (error) {\r\n-      next(error)\r\n-   }\r\n-}\r\n+// exports.register = async  (req, res, next) => {\r\n+//    try {\r\n+//        const user = await User.create(req.body)\r\n+//        const token = jwt.sign({userId: user._id}, process.env.APP_SECRECT);\r\n+//        res.status(200).json({\r\n+//            status: 'success',\r\n+//            data: {token,\r\n+//                   email: user.email,\r\n+//                   userName: user.username\r\n+//         }\r\n+//        })\r\n+//    } catch (error) {\r\n+//       next(error)\r\n+//    }\r\n+// }\r\n \r\n-exports.login = async (req, res, next) => {\r\n+// exports.login = async (req, res, next) => {\r\n+//     try {\r\n+//         const user = await User.findOne({email: req.body.email})\r\n+//         if(!user){\r\n+//             //Error:  Email is not correct\r\n+//         }\r\n+//         if(bcrypt.compareSync(req.body.password, user.password)){\r\n+//             const token = jwt.sign({userId: user._id}, process.env.APP_SECRECT);\r\n+//             res.status(200).json({\r\n+//                 status:'success',\r\n+//                 data:{\r\n+//                     token,\r\n+//                     email: user.email,\r\n+//                     userName: user.username\r\n+//                 }\r\n+//             })\r\n+//         }else{\r\n\\ No newline at end of file\n+//             //Error: password is not correct\r\n+//         }\r\n+//     } catch (error) {\r\n+//         res.json(error)\r\n+//     }\r\n+\r\n+// }\r\n+\r\n+\r\n+exports.register = async (req, res, next)=>{\r\n     try {\r\n-        const user = await User.findOne({email: req.body.email})\r\n-        if(!user){\r\n-            //Error:  Email is not correct\r\n-        }\r\n-        if(bcrypt.compareSync(req.body.password, user.password)){\r\n-            const token = jwt.sign({userId: user._id}, process.env.APP_SECRECT);\r\n+            const user = await User.create(req.body)\r\n             res.status(200).json({\r\n                 status:'success',\r\n-                data:{\r\n-                    token,\r\n-                    email: user.email,\r\n-                    userName: user.username\r\n-                }\r\n+                data:{user}\r\n             })\r\n-        }else{\r\n-            //Error: password is not correct\r\n-        }\r\n     } catch (error) {\r\n         res.json(error)\r\n     }\r\n-\r\n }\r\n \r\n-\r\n-// exports.register = (req, res, next)=>{\r\n-//     res.json('user register')\r\n-// }\r\n-\r\n-// exports.login = (req, res, next)=>{\r\n-//     res.json('user login')\r\n-// }\n+exports.login = (req, res, next)=>{\r\n+    res.json('user login')\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1633159800735,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,61 +2,61 @@\n \r\n const jwt = require('jsonwebtoken')\r\n const bcrypt = require('bcryptjs')\r\n \r\n-// exports.register = async  (req, res, next) => {\r\n-//    try {\r\n-//        const user = await User.create(req.body)\r\n-//        const token = jwt.sign({userId: user._id}, process.env.APP_SECRECT);\r\n-//        res.status(200).json({\r\n-//            status: 'success',\r\n-//            data: {token,\r\n-//                   email: user.email,\r\n-//                   userName: user.username\r\n-//         }\r\n-//        })\r\n-//    } catch (error) {\r\n-//       next(error)\r\n-//    }\r\n-// }\r\n+exports.register = async  (req, res, next) => {\r\n+   try {\r\n+       const user = await User.create(req.body)\r\n+       const token = jwt.sign({userId: user._id}, process.env.APP_SECRECT);\r\n+       res.status(200).json({\r\n+           status: 'success',\r\n+           data: {token,\r\n+                  email: user.email,\r\n+                  userName: user.username\r\n+        }\r\n+       })\r\n+   } catch (error) {\r\n+      next(error)\r\n+   }\r\n+}\r\n \r\n-// exports.login = async (req, res, next) => {\r\n+exports.login = async (req, res, next) => {\r\n+    try {\r\n+        const user = await User.findOne({email: req.body.email})\r\n+        if(!user){\r\n+            //Error:  Email is not correct\r\n+        }\r\n+        if(bcrypt.compareSync(req.body.password, user.password)){\r\n+            const token = jwt.sign({userId: user._id}, process.env.APP_SECRECT);\r\n+            res.status(200).json({\r\n+                status:'success',\r\n+                data:{\r\n+                    token,\r\n+                    email: user.email,\r\n+                    userName: user.username\r\n+                }\r\n+            })\r\n+        }else{\r\n+            //Error: password is not correct\r\n+        }\r\n+    } catch (error) {\r\n+        res.json(error)\r\n+    }\r\n+\r\n+}\r\n+\r\n\\ No newline at end of file\n+\r\n+// exports.register = async (req, res, next)=>{\r\n //     try {\r\n-//         const user = await User.findOne({email: req.body.email})\r\n-//         if(!user){\r\n-//             //Error:  Email is not correct\r\n-//         }\r\n-//         if(bcrypt.compareSync(req.body.password, user.password)){\r\n-//             const token = jwt.sign({userId: user._id}, process.env.APP_SECRECT);\r\n+//             const user = await User.create(req.body)\r\n //             res.status(200).json({\r\n //                 status:'success',\r\n-//                 data:{\r\n-//                     token,\r\n-//                     email: user.email,\r\n-//                     userName: user.username\r\n-//                 }\r\n+//                 data:{user}\r\n //             })\r\n-//         }else{\r\n-//             //Error: password is not correct\r\n-//         }\r\n //     } catch (error) {\r\n //         res.json(error)\r\n //     }\r\n-\r\n // }\r\n \r\n-\r\n-exports.register = async (req, res, next)=>{\r\n-    try {\r\n-            const user = await User.create(req.body)\r\n-            res.status(200).json({\r\n-                status:'success',\r\n-                data:{user}\r\n-            })\r\n-    } catch (error) {\r\n-        res.json(error)\r\n-    }\r\n-}\r\n-\r\n-exports.login = (req, res, next)=>{\r\n-    res.json('user login')\r\n-}\n+// exports.login = (req, res, next)=>{\r\n+//     res.json('user login')\r\n+// }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1633161563158,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,10 +21,13 @@\n \r\n exports.login = async (req, res, next) => {\r\n     try {\r\n         const user = await User.findOne({email: req.body.email})\r\n-        if(!user){\r\n+        if(user){\r\n             //Error:  Email is not correct\r\n+           res.json({\r\n+            message:'User is already !!'\r\n+           })\r\n         }\r\n         if(bcrypt.compareSync(req.body.password, user.password)){\r\n             const token = jwt.sign({userId: user._id}, process.env.APP_SECRECT);\r\n             res.status(200).json({\r\n"
                },
                {
                    "date": 1633185972817,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,13 +21,13 @@\n \r\n exports.login = async (req, res, next) => {\r\n     try {\r\n         const user = await User.findOne({email: req.body.email})\r\n-        if(user){\r\n+        if(!user){\r\n             //Error:  Email is not correct\r\n-           res.json({\r\n-            message:'User is already !!'\r\n-           })\r\n+            const err = new Error('Email is not correct !!');\r\n+            err.statusCode = 400;\r\n+            return next(err)\r\n         }\r\n         if(bcrypt.compareSync(req.body.password, user.password)){\r\n             const token = jwt.sign({userId: user._id}, process.env.APP_SECRECT);\r\n             res.status(200).json({\r\n@@ -39,8 +39,11 @@\n                 }\r\n             })\r\n         }else{\r\n             //Error: password is not correct\r\n+            const err = new Error('Password is not correct !!');\r\n+            err.statusCode = 400;\r\n+            return next(err)\r\n         }\r\n     } catch (error) {\r\n         res.json(error)\r\n     }\r\n"
                },
                {
                    "date": 1634223178107,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,87 @@\n+const User = require('../models/User');\r\n+\r\n+const jwt = require('jsonwebtoken')\r\n+const bcrypt = require('bcryptjs')\r\n+\r\n+exports.register = async  (req, res, next) => {\r\n+   try {\r\n+       const user = await User.create(req.body)\r\n+       const token = jwt.sign({userId: user._id}, process.env.APP_SECRECT);\r\n+       res.status(200).json({\r\n+           status: 'success',\r\n+           data: {token,\r\n+                  email: user.email,\r\n+                  userName: user.username\r\n+        }\r\n+       })\r\n+   } catch (error) {\r\n+      next(error)\r\n+   }\r\n+}\r\n+\r\n+exports.login = async (req, res, next) => {\r\n+    try {\r\n+        const user = await User.findOne({email: req.body.email})\r\n+        if(!user){\r\n+            //Error:  Email is not correct\r\n+            const err = new Error('Email is not correct !!');\r\n+            err.statusCode = 400;\r\n+            return next(err)\r\n+        }\r\n+        if(bcrypt.compareSync(req.body.password, user.password)){\r\n+            const token = jwt.sign({userId: user._id}, process.env.APP_SECRECT);\r\n+            res.status(200).json({\r\n+                status:'success',\r\n+                data:{\r\n+                    token,\r\n+                    email: user.email,\r\n+                    userName: user.username\r\n+                }\r\n+            })\r\n+        }else{\r\n+            //Error: password is not correct\r\n+            const err = new Error('Password is not correct !!');\r\n+            err.statusCode = 400;\r\n+            return next(err)\r\n+        }\r\n+    } catch (error) {\r\n+        res.json(error)\r\n+    }\r\n+\r\n+}\r\n+\r\n+\r\n+// exports.register = async (req, res, next)=>{\r\n+//     try {\r\n+//             const user = await User.create(req.body)\r\n+//             res.status(200).json({\r\n+//                 status:'success',\r\n+//                 data:{user}\r\n+//             })\r\n+//     } catch (error) {\r\n+//         res.json(error)\r\n+//     }\r\n+// }\r\n+\r\n+// exports.login = (req, res, next)=>{\r\n+//     res.json('user login')\r\n+// }\r\n+\r\n+\r\n+//Get current User\r\n+\r\n+exports.getCurrentUser = async(req, res, next)=>{\r\n+    try {\r\n+        const data = {user:null};\r\n+        if(req.user){\r\n+            const user = await User.findOne({_id: req.user.userId});\r\n+            data.user= {userName: user.userName}\r\n+        }\r\n+        res.status(200).json({\r\n+            status:'success',\r\n+            data: data\r\n+        })\r\n+    } catch (error) {\r\n+        res.json(error);\r\n+    }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1634224966279,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,87 @@\n+const User = require('../models/User');\r\n+\r\n+const jwt = require('jsonwebtoken')\r\n+const bcrypt = require('bcryptjs')\r\n+\r\n+exports.register = async  (req, res, next) => {\r\n+   try {\r\n+       const user = await User.create(req.body)\r\n+       const token = jwt.sign({userId: user._id}, process.env.APP_SECRECT);\r\n+       res.status(200).json({\r\n+           status: 'success',\r\n+           data: {token,\r\n+                  email: user.email,\r\n+                  userName: user.username\r\n+        }\r\n+       })\r\n+   } catch (error) {\r\n+      next(error)\r\n+   }\r\n+}\r\n+\r\n+exports.login = async (req, res, next) => {\r\n+    try {\r\n+        const user = await User.findOne({email: req.body.email})\r\n+        if(!user){\r\n+            //Error:  Email is not correct\r\n+            const err = new Error('Email is not correct !!');\r\n+            err.statusCode = 400;\r\n+            return next(err)\r\n+        }\r\n+        if(bcrypt.compareSync(req.body.password, user.password)){\r\n+            const token = jwt.sign({userId: user._id}, process.env.APP_SECRECT);\r\n+            res.status(200).json({\r\n+                status:'success',\r\n+                data:{\r\n+                    token,\r\n+                    email: user.email,\r\n+                    userName: user.username\r\n+                }\r\n+            })\r\n+        }else{\r\n+            //Error: password is not correct\r\n+            const err = new Error('Password is not correct !!');\r\n+            err.statusCode = 400;\r\n+            return next(err)\r\n+        }\r\n+    } catch (error) {\r\n+        res.json(error)\r\n+    }\r\n+\r\n+}\r\n+\r\n+\r\n+// exports.register = async (req, res, next)=>{\r\n+//     try {\r\n+//             const user = await User.create(req.body)\r\n+//             res.status(200).json({\r\n+//                 status:'success',\r\n+//                 data:{user}\r\n+//             })\r\n+//     } catch (error) {\r\n+//         res.json(error)\r\n+//     }\r\n+// }\r\n+\r\n+// exports.login = (req, res, next)=>{\r\n+//     res.json('user login')\r\n+// }\r\n+\r\n+\r\n+//Get current User\r\n+\r\n+exports.getCurrentUser = async(req, res, next)=>{\r\n+    try {\r\n+        const data = {user:null};\r\n+        if(req.user){\r\n+            const user = await User.findOne({_id: req.user.userId});\r\n+            data.user= {userName: user.userName}\r\n+        }\r\n+        res.status(200).json({\r\n+            status:'success',\r\n+            data: data\r\n+        })\r\n+    } catch (error) {\r\n+        res.json(error);\r\n+    }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1634225283065,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,165 +78,10 @@\n             data.user= {userName: user.userName}\r\n         }\r\n         res.status(200).json({\r\n             status:'success',\r\n-            data: data\r\n+            data: data,\r\n         })\r\n     } catch (error) {\r\n         res.json(error);\r\n     }\r\n-}\n-const User = require('../models/User');\r\n-\r\n-const jwt = require('jsonwebtoken')\r\n-const bcrypt = require('bcryptjs')\r\n-\r\n-exports.register = async  (req, res, next) => {\r\n-   try {\r\n-       const user = await User.create(req.body)\r\n-       const token = jwt.sign({userId: user._id}, process.env.APP_SECRECT);\r\n-       res.status(200).json({\r\n-           status: 'success',\r\n-           data: {token,\r\n-                  email: user.email,\r\n-                  userName: user.username\r\n-        }\r\n-       })\r\n-   } catch (error) {\r\n-      next(error)\r\n-   }\r\n-}\r\n-\r\n-exports.login = async (req, res, next) => {\r\n-    try {\r\n-        const user = await User.findOne({email: req.body.email})\r\n-        if(!user){\r\n-            //Error:  Email is not correct\r\n-            const err = new Error('Email is not correct !!');\r\n-            err.statusCode = 400;\r\n-            return next(err)\r\n-        }\r\n-        if(bcrypt.compareSync(req.body.password, user.password)){\r\n-            const token = jwt.sign({userId: user._id}, process.env.APP_SECRECT);\r\n-            res.status(200).json({\r\n-                status:'success',\r\n-                data:{\r\n-                    token,\r\n-                    email: user.email,\r\n-                    userName: user.username\r\n-                }\r\n-            })\r\n-        }else{\r\n-            //Error: password is not correct\r\n-            const err = new Error('Password is not correct !!');\r\n-            err.statusCode = 400;\r\n-            return next(err)\r\n-        }\r\n-    } catch (error) {\r\n-        res.json(error)\r\n-    }\r\n-\r\n-}\r\n-\r\n-\r\n-// exports.register = async (req, res, next)=>{\r\n-//     try {\r\n-//             const user = await User.create(req.body)\r\n-//             res.status(200).json({\r\n-//                 status:'success',\r\n-//                 data:{user}\r\n-//             })\r\n-//     } catch (error) {\r\n-//         res.json(error)\r\n-//     }\r\n-// }\r\n-\r\n-// exports.login = (req, res, next)=>{\r\n-//     res.json('user login')\r\n-// }\r\n-\r\n-\r\n-//Get current User\r\n-\r\n-exports.getCurrentUser = async(req, res, next)=>{\r\n-    try {\r\n-        const data = {user:null};\r\n-        if(req.user){\r\n-            const user = await User.findOne({_id: req.user.userId});\r\n-            data.user= {userName: user.userName}\r\n-        }\r\n-        res.status(200).json({\r\n-            status:'success',\r\n-            data: data\r\n-        })\r\n-    } catch (error) {\r\n-        res.json(error);\r\n-    }\r\n-}\n-const User = require('../models/User');\r\n-\r\n-const jwt = require('jsonwebtoken')\r\n-const bcrypt = require('bcryptjs')\r\n-\r\n-exports.register = async  (req, res, next) => {\r\n-   try {\r\n-       const user = await User.create(req.body)\r\n-       const token = jwt.sign({userId: user._id}, process.env.APP_SECRECT);\r\n-       res.status(200).json({\r\n-           status: 'success',\r\n-           data: {token,\r\n-                  email: user.email,\r\n-                  userName: user.username\r\n-        }\r\n-       })\r\n-   } catch (error) {\r\n-      next(error)\r\n-   }\r\n-}\r\n-\r\n-exports.login = async (req, res, next) => {\r\n-    try {\r\n-        const user = await User.findOne({email: req.body.email})\r\n-        if(!user){\r\n-            //Error:  Email is not correct\r\n-            const err = new Error('Email is not correct !!');\r\n-            err.statusCode = 400;\r\n-            return next(err)\r\n-        }\r\n-        if(bcrypt.compareSync(req.body.password, user.password)){\r\n-            const token = jwt.sign({userId: user._id}, process.env.APP_SECRECT);\r\n-            res.status(200).json({\r\n-                status:'success',\r\n-                data:{\r\n-                    token,\r\n-                    email: user.email,\r\n-                    userName: user.username\r\n-                }\r\n-            })\r\n-        }else{\r\n-            //Error: password is not correct\r\n-            const err = new Error('Password is not correct !!');\r\n-            err.statusCode = 400;\r\n-            return next(err)\r\n-        }\r\n-    } catch (error) {\r\n-        res.json(error)\r\n-    }\r\n-\r\n-}\r\n-\r\n-\r\n-// exports.register = async (req, res, next)=>{\r\n-//     try {\r\n-//             const user = await User.create(req.body)\r\n-//             res.status(200).json({\r\n-//                 status:'success',\r\n-//                 data:{user}\r\n-//             })\r\n-//     } catch (error) {\r\n-//         res.json(error)\r\n-//     }\r\n-// }\r\n-\r\n-// exports.login = (req, res, next)=>{\r\n-//     res.json('user login')\r\n\\ No newline at end of file\n-// }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1634225324931,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,9 +79,10 @@\n         }\r\n         res.status(200).json({\r\n             status:'success',\r\n             data: data,\r\n-        })\r\n+        });\r\n+        console.log(data)\r\n     } catch (error) {\r\n         res.json(error);\r\n     }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1634225370775,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n     try {\r\n         const data = {user:null};\r\n         if(req.user){\r\n             const user = await User.findOne({_id: req.user.userId});\r\n-            data.user= {userName: user.userName}\r\n+            data.user= {userName: user.username}\r\n         }\r\n         res.status(200).json({\r\n             status:'success',\r\n             data: data,\r\n"
                },
                {
                    "date": 1635176250210,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,12 +20,12 @@\n }\r\n \r\n exports.login = async (req, res, next) => {\r\n     try {\r\n-        const user = await User.findOne({email: req.body.email})\r\n+        const user = await User.findOne({username: req.body.username})\r\n         if(!user){\r\n             //Error:  Email is not correct\r\n-            const err = new Error('Email is not correct !!');\r\n+            const err = new Error('Username is not correct !!');\r\n             err.statusCode = 400;\r\n             return next(err)\r\n         }\r\n         if(bcrypt.compareSync(req.body.password, user.password)){\r\n"
                },
                {
                    "date": 1635186718636,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,88 @@\n+const User = require('../models/User');\r\n+\r\n+const jwt = require('jsonwebtoken')\r\n+const bcrypt = require('bcryptjs')\r\n+\r\n+exports.register = async  (req, res, next) => {\r\n+   try {\r\n+       const user = await User.create(req.body)\r\n+       const token = jwt.sign({userId: user._id}, process.env.APP_SECRECT);\r\n+       res.status(200).json({\r\n+           status: 'success',\r\n+           data: {token,\r\n+                  email: user.email,\r\n+                  userName: user.username\r\n+        }\r\n+       })\r\n+   } catch (error) {\r\n+      next(error)\r\n+   }\r\n+}\r\n+\r\n+exports.login = async (req, res, next) => {\r\n+    try {\r\n+        const user = await User.findOne({username: req.body.username})\r\n+        if(!user){\r\n+            //Error:  Email is not correct\r\n+            const err = new Error('Username is not correct !!');\r\n+            err.statusCode = 400;\r\n+            return next(err)\r\n+        }\r\n+        if(bcrypt.compareSync(req.body.password, user.password)){\r\n+            const token = jwt.sign({userId: user._id, userName:user.username}, process.env.APP_SECRECT);\r\n+            res.status(200).json({\r\n+                status:'success',\r\n+                data:{\r\n+                    token,\r\n+                    email: user.email,\r\n+                    userName: user.username\r\n+                }\r\n+            })\r\n+        }else{\r\n+            //Error: password is not correct\r\n+            const err = new Error('Password is not correct !!');\r\n+            err.statusCode = 400;\r\n+            return next(err)\r\n+        }\r\n+    } catch (error) {\r\n+        res.json(error)\r\n+    }\r\n+\r\n+}\r\n+\r\n+\r\n+// exports.register = async (req, res, next)=>{\r\n+//     try {\r\n+//             const user = await User.create(req.body)\r\n+//             res.status(200).json({\r\n+//                 status:'success',\r\n+//                 data:{user}\r\n+//             })\r\n+//     } catch (error) {\r\n+//         res.json(error)\r\n+//     }\r\n+// }\r\n+\r\n+// exports.login = (req, res, next)=>{\r\n+//     res.json('user login')\r\n+// }\r\n+\r\n+\r\n+//Get current User\r\n+\r\n+exports.getCurrentUser = async(req, res, next)=>{\r\n+    try {\r\n+        const data = {user:null};\r\n+        if(req.user){\r\n+            const user = await User.findOne({_id: req.user.userId});\r\n+            data.user= {userName: user.username}\r\n+        }\r\n+        res.status(200).json({\r\n+            status:'success',\r\n+            data: data,\r\n+        });\r\n+        console.log(data)\r\n+    } catch (error) {\r\n+        res.json(error);\r\n+    }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1635239928999,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,93 +84,10 @@\n         console.log(data)\r\n     } catch (error) {\r\n         res.json(error);\r\n     }\r\n-}\n-const User = require('../models/User');\r\n-\r\n-const jwt = require('jsonwebtoken')\r\n-const bcrypt = require('bcryptjs')\r\n-\r\n-exports.register = async  (req, res, next) => {\r\n-   try {\r\n-       const user = await User.create(req.body)\r\n-       const token = jwt.sign({userId: user._id}, process.env.APP_SECRECT);\r\n-       res.status(200).json({\r\n-           status: 'success',\r\n-           data: {token,\r\n-                  email: user.email,\r\n-                  userName: user.username\r\n-        }\r\n-       })\r\n-   } catch (error) {\r\n-      next(error)\r\n-   }\r\n }\r\n \r\n-exports.login = async (req, res, next) => {\r\n-    try {\r\n-        const user = await User.findOne({username: req.body.username})\r\n-        if(!user){\r\n-            //Error:  Email is not correct\r\n-            const err = new Error('Username is not correct !!');\r\n-            err.statusCode = 400;\r\n-            return next(err)\r\n-        }\r\n-        if(bcrypt.compareSync(req.body.password, user.password)){\r\n-            const token = jwt.sign({userId: user._id}, process.env.APP_SECRECT);\r\n-            res.status(200).json({\r\n-                status:'success',\r\n-                data:{\r\n-                    token,\r\n-                    email: user.email,\r\n-                    userName: user.username\r\n-                }\r\n-            })\r\n-        }else{\r\n-            //Error: password is not correct\r\n-            const err = new Error('Password is not correct !!');\r\n-            err.statusCode = 400;\r\n-            return next(err)\r\n-        }\r\n-    } catch (error) {\r\n-        res.json(error)\r\n-    }\r\n \r\n-}\r\n+exports.getAllUsers = async (req, res)=>{\r\n \r\n-\r\n-// exports.register = async (req, res, next)=>{\r\n-//     try {\r\n-//             const user = await User.create(req.body)\r\n-//             res.status(200).json({\r\n-//                 status:'success',\r\n-//                 data:{user}\r\n-//             })\r\n-//     } catch (error) {\r\n-//         res.json(error)\r\n-//     }\r\n-// }\r\n-\r\n-// exports.login = (req, res, next)=>{\r\n-//     res.json('user login')\r\n-// }\r\n-\r\n-\r\n-//Get current User\r\n-\r\n-exports.getCurrentUser = async(req, res, next)=>{\r\n-    try {\r\n-        const data = {user:null};\r\n-        if(req.user){\r\n-            const user = await User.findOne({_id: req.user.userId});\r\n-            data.user= {userName: user.username}\r\n-        }\r\n-        res.status(200).json({\r\n-            status:'success',\r\n-            data: data,\r\n-        });\r\n-        console.log(data)\r\n-    } catch (error) {\r\n-        res.json(error);\r\n-    }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1635240082906,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,7 +87,15 @@\n     }\r\n }\r\n \r\n \r\n-exports.getAllUsers = async (req, res)=>{\r\n-\r\n+exports.getAllUsers = async (req, res, next) => {\r\n+    try {\r\n+        const user = await User.find({})\r\n+        res.status(200).json({\r\n+            status:'success',\r\n+            data: {user}\r\n+        })\r\n+    } catch (error) {\r\n+        \r\n+    }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1635240351720,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,7 +95,13 @@\n             status:'success',\r\n             data: {user}\r\n         })\r\n     } catch (error) {\r\n-        \r\n+        res.json(error);\r\n     }\r\n\\ No newline at end of file\n-}\n+}\r\n+\r\n+exports.updateUser = async (req, res, next) => {\r\n+\r\n+}\r\n+\r\n+export.deleteUser = async (req, res, next) => {}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1635240510450,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,8 +100,15 @@\n     }\r\n }\r\n \r\n exports.updateUser = async (req, res, next) => {\r\n-\r\n+    try {\r\n+        const{userId} = req.params;\r\n+        const user = await User.findByIdAndUpdate(postId,{...req.body},{new:true, runValidators:true})\r\n\\ No newline at end of file\n+    } catch (error) {\r\n+        \r\n+    }\r\n }\r\n \r\n-export.deleteUser = async (req, res, next) => {}\n+exports.deleteUser = async (req, res, next) => {\r\n+\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1635240539802,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,9 +102,13 @@\n \r\n exports.updateUser = async (req, res, next) => {\r\n     try {\r\n         const{userId} = req.params;\r\n-        const user = await User.findByIdAndUpdate(postId,{...req.body},{new:true, runValidators:true})\r\n+        const user = await User.findByIdAndUpdate(userId,{...req.body},{new:true, runValidators:true})\r\n+        res.status(200).json({\r\n+            status:'success',\r\n+            data: {user}\r\n+        })\r\n     } catch (error) {\r\n         \r\n     }\r\n }\r\n"
                },
                {
                    "date": 1635240647665,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -108,11 +108,20 @@\n             status:'success',\r\n             data: {user}\r\n         })\r\n     } catch (error) {\r\n-        \r\n+        res.json(error);\r\n     }\r\n }\r\n \r\n exports.deleteUser = async (req, res, next) => {\r\n-\r\n+    try {\r\n+        const{userId} = req.params;\r\n+        await User.findByIdAndDelete(userId)\r\n+        res.status(200).json({\r\n+            status:'success',\r\n+            message: 'Delete user successfully!'\r\n+        })\r\n+    } catch (error) {\r\n+        \r\n+    }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1635241404015,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,9 +92,12 @@\n     try {\r\n         const user = await User.find({})\r\n         res.status(200).json({\r\n             status:'success',\r\n-            data: {user}\r\n+            data:{\r\n+                email: user.email,\r\n+                userName: user.username\r\n+            }\r\n         })\r\n     } catch (error) {\r\n         res.json(error);\r\n     }\r\n"
                },
                {
                    "date": 1635241459521,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,13 +90,13 @@\n \r\n exports.getAllUsers = async (req, res, next) => {\r\n     try {\r\n         const user = await User.find({})\r\n+        data.user= {userName: user.username, Email: user.email}\r\n         res.status(200).json({\r\n             status:'success',\r\n             data:{\r\n-                email: user.email,\r\n-                userName: user.username\r\n+               data\r\n             }\r\n         })\r\n     } catch (error) {\r\n         res.json(error);\r\n"
                },
                {
                    "date": 1635241505632,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,14 +90,11 @@\n \r\n exports.getAllUsers = async (req, res, next) => {\r\n     try {\r\n         const user = await User.find({})\r\n-        data.user= {userName: user.username, Email: user.email}\r\n         res.status(200).json({\r\n             status:'success',\r\n-            data:{\r\n-               data\r\n-            }\r\n+            data: {user}\r\n         })\r\n     } catch (error) {\r\n         res.json(error);\r\n     }\r\n"
                },
                {
                    "date": 1635258170605,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,127 @@\n+const User = require('../models/User');\r\n+\r\n+const jwt = require('jsonwebtoken')\r\n+const bcrypt = require('bcryptjs')\r\n+\r\n+exports.register = async  (req, res, next) => {\r\n+   try {\r\n+       const user = await User.create(req.body)\r\n+       const token = jwt.sign({userId: user._id}, process.env.APP_SECRECT);\r\n+       res.status(200).json({\r\n+           status: 'success',\r\n+           data: {token,\r\n+                  email: user.email,\r\n+                  userName: user.username\r\n+        }\r\n+       })\r\n+   } catch (error) {\r\n+      next(error)\r\n+   }\r\n+}\r\n+\r\n+exports.login = async (req, res, next) => {\r\n+    try {\r\n+        const user = await User.findOne({username: req.body.username})\r\n+        if(!user){\r\n+            //Error:  Email is not correct\r\n+            const err = new Error('Username is not correct !!');\r\n+            err.statusCode = 400;\r\n+            return next(err)\r\n+        }\r\n+        if(bcrypt.compareSync(req.body.password, user.password)){\r\n+            const token = jwt.sign({userId: user._id, userName:user.username}, process.env.APP_SECRECT);\r\n+            res.status(200).json({\r\n+                status:'success',\r\n+                data:{\r\n+                    token,\r\n+                    email: user.email,\r\n+                    userName: user.username\r\n+                }\r\n+            })\r\n+        }else{\r\n+            //Error: password is not correct\r\n+            const err = new Error('Password is not correct !!');\r\n+            err.statusCode = 400;\r\n+            return next(err)\r\n+        }\r\n+    } catch (error) {\r\n+        res.json(error)\r\n+    }\r\n+\r\n+}\r\n+\r\n+\r\n+// exports.register = async (req, res, next)=>{\r\n+//     try {\r\n+//             const user = await User.create(req.body)\r\n+//             res.status(200).json({\r\n+//                 status:'success',\r\n+//                 data:{user}\r\n+//             })\r\n+//     } catch (error) {\r\n+//         res.json(error)\r\n+//     }\r\n+// }\r\n+\r\n+// exports.login = (req, res, next)=>{\r\n+//     res.json('user login')\r\n+// }\r\n+\r\n+\r\n+//Get current User\r\n+\r\n+exports.getCurrentUser = async(req, res, next)=>{\r\n+    try {\r\n+        const data = {user:null};\r\n+        if(req.user){\r\n+            const user = await User.findOne({_id: req.user.userId});\r\n+            data.user= {userName: user.username}\r\n+        }\r\n+        res.status(200).json({\r\n+            status:'success',\r\n+            data: data,\r\n+        });\r\n+        console.log(data)\r\n+    } catch (error) {\r\n+        res.json(error);\r\n+    }\r\n+}\r\n+\r\n+\r\n+exports.getAllUsers = async (req, res, next) => {\r\n+    try {\r\n+        const user = await User.find({})\r\n+        res.status(200).json({\r\n+            status:'success',\r\n+            data: user\r\n+        })\r\n+    } catch (error) {\r\n+        res.json(error);\r\n+    }\r\n+}\r\n+\r\n+exports.updateUser = async (req, res, next) => {\r\n+    try {\r\n+        const{userId} = req.params;\r\n+        const user = await User.findByIdAndUpdate(userId,{...req.body},{new:true, runValidators:true})\r\n+        res.status(200).json({\r\n+            status:'success',\r\n+            data: {user}\r\n+        })\r\n+    } catch (error) {\r\n+        res.json(error);\r\n+    }\r\n+}\r\n+\r\n+exports.deleteUser = async (req, res, next) => {\r\n+    try {\r\n+        const{userId} = req.params;\r\n+        await User.findByIdAndDelete(userId)\r\n+        res.status(200).json({\r\n+            status:'success',\r\n+            message: 'Delete user successfully!'\r\n+        })\r\n+    } catch (error) {\r\n+        \r\n+    }\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1635258185768,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,132 +123,5 @@\n         })\r\n     } catch (error) {\r\n         \r\n     }\r\n-}\n-const User = require('../models/User');\r\n-\r\n-const jwt = require('jsonwebtoken')\r\n-const bcrypt = require('bcryptjs')\r\n-\r\n-exports.register = async  (req, res, next) => {\r\n-   try {\r\n-       const user = await User.create(req.body)\r\n-       const token = jwt.sign({userId: user._id}, process.env.APP_SECRECT);\r\n-       res.status(200).json({\r\n-           status: 'success',\r\n-           data: {token,\r\n-                  email: user.email,\r\n-                  userName: user.username\r\n-        }\r\n-       })\r\n-   } catch (error) {\r\n-      next(error)\r\n-   }\r\n-}\r\n-\r\n-exports.login = async (req, res, next) => {\r\n-    try {\r\n-        const user = await User.findOne({username: req.body.username})\r\n-        if(!user){\r\n-            //Error:  Email is not correct\r\n-            const err = new Error('Username is not correct !!');\r\n-            err.statusCode = 400;\r\n-            return next(err)\r\n-        }\r\n-        if(bcrypt.compareSync(req.body.password, user.password)){\r\n-            const token = jwt.sign({userId: user._id, userName:user.username}, process.env.APP_SECRECT);\r\n-            res.status(200).json({\r\n-                status:'success',\r\n-                data:{\r\n-                    token,\r\n-                    email: user.email,\r\n-                    userName: user.username\r\n-                }\r\n-            })\r\n-        }else{\r\n-            //Error: password is not correct\r\n-            const err = new Error('Password is not correct !!');\r\n-            err.statusCode = 400;\r\n-            return next(err)\r\n-        }\r\n-    } catch (error) {\r\n-        res.json(error)\r\n-    }\r\n-\r\n-}\r\n-\r\n-\r\n-// exports.register = async (req, res, next)=>{\r\n-//     try {\r\n-//             const user = await User.create(req.body)\r\n-//             res.status(200).json({\r\n-//                 status:'success',\r\n-//                 data:{user}\r\n-//             })\r\n-//     } catch (error) {\r\n-//         res.json(error)\r\n-//     }\r\n-// }\r\n-\r\n-// exports.login = (req, res, next)=>{\r\n-//     res.json('user login')\r\n-// }\r\n-\r\n-\r\n-//Get current User\r\n-\r\n-exports.getCurrentUser = async(req, res, next)=>{\r\n-    try {\r\n-        const data = {user:null};\r\n-        if(req.user){\r\n-            const user = await User.findOne({_id: req.user.userId});\r\n-            data.user= {userName: user.username}\r\n-        }\r\n-        res.status(200).json({\r\n-            status:'success',\r\n-            data: data,\r\n-        });\r\n-        console.log(data)\r\n-    } catch (error) {\r\n-        res.json(error);\r\n-    }\r\n-}\r\n-\r\n-\r\n-exports.getAllUsers = async (req, res, next) => {\r\n-    try {\r\n-        const user = await User.find({})\r\n-        res.status(200).json({\r\n-            status:'success',\r\n-            data: {user}\r\n-        })\r\n-    } catch (error) {\r\n-        res.json(error);\r\n-    }\r\n-}\r\n-\r\n-exports.updateUser = async (req, res, next) => {\r\n-    try {\r\n-        const{userId} = req.params;\r\n-        const user = await User.findByIdAndUpdate(userId,{...req.body},{new:true, runValidators:true})\r\n-        res.status(200).json({\r\n-            status:'success',\r\n-            data: {user}\r\n-        })\r\n-    } catch (error) {\r\n-        res.json(error);\r\n-    }\r\n-}\r\n-\r\n-exports.deleteUser = async (req, res, next) => {\r\n-    try {\r\n-        const{userId} = req.params;\r\n-        await User.findByIdAndDelete(userId)\r\n-        res.status(200).json({\r\n-            status:'success',\r\n-            message: 'Delete user successfully!'\r\n-        })\r\n-    } catch (error) {\r\n-        \r\n-    }\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1635258624840,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,9 +92,9 @@\n     try {\r\n         const user = await User.find({})\r\n         res.status(200).json({\r\n             status:'success',\r\n-            data: user\r\n+            users: user\r\n         })\r\n     } catch (error) {\r\n         res.json(error);\r\n     }\r\n"
                },
                {
                    "date": 1635263080478,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,9 +99,9 @@\n         res.json(error);\r\n     }\r\n }\r\n \r\n-exports.updateUser = async (req, res, next) => {\r\n+exports.updateuser = async (req, res, next) => {\r\n     try {\r\n         const{userId} = req.params;\r\n         const user = await User.findByIdAndUpdate(userId,{...req.body},{new:true, runValidators:true})\r\n         res.status(200).json({\r\n@@ -112,9 +112,9 @@\n         res.json(error);\r\n     }\r\n }\r\n \r\n-exports.deleteUser = async (req, res, next) => {\r\n+exports.deleteuser = async (req, res, next) => {\r\n     try {\r\n         const{userId} = req.params;\r\n         await User.findByIdAndDelete(userId)\r\n         res.status(200).json({\r\n@@ -123,5 +123,6 @@\n         })\r\n     } catch (error) {\r\n         \r\n     }\r\n+\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1635263114212,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,9 +99,9 @@\n         res.json(error);\r\n     }\r\n }\r\n \r\n-exports.updateuser = async (req, res, next) => {\r\n+exports.updateUser = async (req, res, next) => {\r\n     try {\r\n         const{userId} = req.params;\r\n         const user = await User.findByIdAndUpdate(userId,{...req.body},{new:true, runValidators:true})\r\n         res.status(200).json({\r\n"
                },
                {
                    "date": 1635263199929,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -112,9 +112,9 @@\n         res.json(error);\r\n     }\r\n }\r\n \r\n-exports.deleteuser = async (req, res, next) => {\r\n+exports.deleteUser = async (req, res, next) => {\r\n     try {\r\n         const{userId} = req.params;\r\n         await User.findByIdAndDelete(userId)\r\n         res.status(200).json({\r\n"
                },
                {
                    "date": 1635264864727,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,5 +124,18 @@\n     } catch (error) {\r\n         \r\n     }\r\n \r\n+\r\n+    exports.blockUser = async (req, res, next) => {\r\n+        try {\r\n+            const{userId} = req.params;\r\n+            await User.findByIdAndDelete(userId)\r\n+            res.status(200).json({\r\n+                status:'success',\r\n+                message: 'Delete user successfully!'\r\n+            })\r\n+        } catch (error) {\r\n+            \r\n+        }\r\n+\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1635264880970,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,14 +127,9 @@\n \r\n \r\n     exports.blockUser = async (req, res, next) => {\r\n         try {\r\n-            const{userId} = req.params;\r\n-            await User.findByIdAndDelete(userId)\r\n-            res.status(200).json({\r\n-                status:'success',\r\n-                message: 'Delete user successfully!'\r\n-            })\r\n+          \r\n         } catch (error) {\r\n             \r\n         }\r\n \r\n"
                },
                {
                    "date": 1635264902430,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -132,5 +132,6 @@\n         } catch (error) {\r\n             \r\n         }\r\n \r\n+}\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1635265478965,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,13 +125,19 @@\n         \r\n     }\r\n \r\n \r\n-    exports.blockUser = async (req, res, next) => {\r\n-        try {\r\n-          \r\n+exports.blockUser = async (req, res, next) => {\r\n+    try {\r\n+        const{userId} = req.params;\r\n+        await User.findByIdAndUpdate(userId,{status:false})\r\n+        res.status(200).json({\r\n+            status:'success',\r\n+            message: 'Delete user successfully!'\r\n+        })\r\n         } catch (error) {\r\n             \r\n         }\r\n \r\n }\r\n+\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1635265503708,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,9 +131,9 @@\n         const{userId} = req.params;\r\n         await User.findByIdAndUpdate(userId,{status:false})\r\n         res.status(200).json({\r\n             status:'success',\r\n-            message: 'Delete user successfully!'\r\n+            message: 'Update user successfully!'\r\n         })\r\n         } catch (error) {\r\n             \r\n         }\r\n"
                },
                {
                    "date": 1635265731494,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,9 +124,9 @@\n     } catch (error) {\r\n         \r\n     }\r\n \r\n-\r\n+}\r\n exports.blockUser = async (req, res, next) => {\r\n     try {\r\n         const{userId} = req.params;\r\n         await User.findByIdAndUpdate(userId,{status:false})\r\n@@ -139,5 +139,4 @@\n         }\r\n \r\n }\r\n \r\n-}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1635266559293,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -139,4 +139,18 @@\n         }\r\n \r\n }\r\n \r\n+exports.unBlockUser = async (req, res, next) => {\r\n+    try {\r\n+        const{userId} = req.params;\r\n+        await User.findByIdAndUpdate(userId,{status:false})\r\n+        res.status(200).json({\r\n+            status:'success',\r\n+            message: 'UnBlock user successfully!'\r\n+        })\r\n+        } catch (error) {\r\n+            \r\n+        }\r\n+\r\n+}\r\n+\r\n"
                },
                {
                    "date": 1635267274669,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -142,9 +142,9 @@\n \r\n exports.unBlockUser = async (req, res, next) => {\r\n     try {\r\n         const{userId} = req.params;\r\n-        await User.findByIdAndUpdate(userId,{status:false})\r\n+        await User.findByIdAndUpdate(userId,{status:true})\r\n         res.status(200).json({\r\n             status:'success',\r\n             message: 'UnBlock user successfully!'\r\n         })\r\n"
                },
                {
                    "date": 1635267596450,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,8 +27,14 @@\n             const err = new Error('Username is not correct !!');\r\n             err.statusCode = 400;\r\n             return next(err)\r\n         }\r\n+        if(!user.status){\r\n+            //Error:  Email is not correct\r\n+            const err = new Error('your account is blocked !!');\r\n+            err.statusCode = 400;\r\n+            return next(err)\r\n+        }\r\n         if(bcrypt.compareSync(req.body.password, user.password)){\r\n             const token = jwt.sign({userId: user._id, userName:user.username}, process.env.APP_SECRECT);\r\n             res.status(200).json({\r\n                 status:'success',\r\n"
                },
                {
                    "date": 1635321887090,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,163 @@\n+const User = require('../models/User');\r\n+\r\n+const jwt = require('jsonwebtoken')\r\n+const bcrypt = require('bcryptjs')\r\n+\r\n+exports.register = async  (req, res, next) => {\r\n+   try {\r\n+       const user = await User.create(req.body)\r\n+       const token = jwt.sign({userId: user._id}, process.env.APP_SECRECT);\r\n+       res.status(200).json({\r\n+           status: 'success',\r\n+           data: {token,\r\n+                  email: user.email,\r\n+                  userName: user.username\r\n+        }\r\n+       })\r\n+   } catch (error) {\r\n+      next(error)\r\n+   }\r\n+}\r\n+\r\n+exports.login = async (req, res, next) => {\r\n+    try {\r\n+        const user = await User.findOne({username: req.body.username})\r\n+        if(!user){\r\n+            //Error:  Email is not correct\r\n+            const err = new Error('Username is not correct !!');\r\n+            err.statusCode = 400;\r\n+            return next(err)\r\n+        }\r\n+        if(!user.status){\r\n+            //Error:  Email is not correct\r\n+            const err = new Error('your account is blocked !!');\r\n+            err.statusCode = 400;\r\n+            return next(err)\r\n+        }\r\n+        if(bcrypt.compareSync(req.body.password, user.password)){\r\n+            const token = jwt.sign({userId: user._id, userName:user.username}, process.env.APP_SECRECT);\r\n+            res.status(200).json({\r\n+                status:'success',\r\n+                data:{\r\n+                    token,\r\n+                    email: user.email,\r\n+                    userName: user.username,\r\n+                    role: user.role\r\n+                }\r\n+            })\r\n+        }else{\r\n+            //Error: password is not correct\r\n+            const err = new Error('Password is not correct !!');\r\n+            err.statusCode = 400;\r\n+            return next(err)\r\n+        }\r\n+    } catch (error) {\r\n+        res.json(error)\r\n+    }\r\n+\r\n+}\r\n+\r\n+\r\n+// exports.register = async (req, res, next)=>{\r\n+//     try {\r\n+//             const user = await User.create(req.body)\r\n+//             res.status(200).json({\r\n+//                 status:'success',\r\n+//                 data:{user}\r\n+//             })\r\n+//     } catch (error) {\r\n+//         res.json(error)\r\n+//     }\r\n+// }\r\n+\r\n+// exports.login = (req, res, next)=>{\r\n+//     res.json('user login')\r\n+// }\r\n+\r\n+\r\n+//Get current User\r\n+\r\n+exports.getCurrentUser = async(req, res, next)=>{\r\n+    try {\r\n+        const data = {user:null};\r\n+        if(req.user){\r\n+            const user = await User.findOne({_id: req.user.userId});\r\n+            data.user= {userName: user.username}\r\n+        }\r\n+        res.status(200).json({\r\n+            status:'success',\r\n+            data: data,\r\n+        });\r\n+        console.log(data)\r\n+    } catch (error) {\r\n+        res.json(error);\r\n+    }\r\n+}\r\n+\r\n+\r\n+exports.getAllUsers = async (req, res, next) => {\r\n+    try {\r\n+        const user = await User.find({})\r\n+        res.status(200).json({\r\n+            status:'success',\r\n+            users: user\r\n+        })\r\n+    } catch (error) {\r\n+        res.json(error);\r\n+    }\r\n+}\r\n+\r\n+exports.updateUser = async (req, res, next) => {\r\n+    try {\r\n+        const{userId} = req.params;\r\n+        const user = await User.findByIdAndUpdate(userId,{...req.body},{new:true, runValidators:true})\r\n+        res.status(200).json({\r\n+            status:'success',\r\n+            data: {user}\r\n+        })\r\n+    } catch (error) {\r\n+        res.json(error);\r\n+    }\r\n+}\r\n+\r\n+exports.deleteUser = async (req, res, next) => {\r\n+    try {\r\n+        const{userId} = req.params;\r\n+        await User.findByIdAndDelete(userId)\r\n+        res.status(200).json({\r\n+            status:'success',\r\n+            message: 'Delete user successfully!'\r\n+        })\r\n+    } catch (error) {\r\n+        \r\n+    }\r\n+\r\n+}\r\n+exports.blockUser = async (req, res, next) => {\r\n+    try {\r\n+        const{userId} = req.params;\r\n+        await User.findByIdAndUpdate(userId,{status:false})\r\n+        res.status(200).json({\r\n+            status:'success',\r\n+            message: 'Update user successfully!'\r\n+        })\r\n+        } catch (error) {\r\n+            \r\n+        }\r\n+\r\n+}\r\n+\r\n+exports.unBlockUser = async (req, res, next) => {\r\n+    try {\r\n+        const{userId} = req.params;\r\n+        await User.findByIdAndUpdate(userId,{status:true})\r\n+        res.status(200).json({\r\n+            status:'success',\r\n+            message: 'UnBlock user successfully!'\r\n+        })\r\n+        } catch (error) {\r\n+            \r\n+        }\r\n+\r\n+}\r\n+\r\n"
                },
                {
                    "date": 1635322199168,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n             err.statusCode = 400;\r\n             return next(err)\r\n         }\r\n         if(bcrypt.compareSync(req.body.password, user.password)){\r\n-            const token = jwt.sign({userId: user._id, userName:user.username}, process.env.APP_SECRECT);\r\n+            const token = jwt.sign({userId: user._id, userName:user.username, role:user.role}, process.env.APP_SECRECT);\r\n             res.status(200).json({\r\n                 status:'success',\r\n                 data:{\r\n                     token,\r\n@@ -160,166 +160,4 @@\n         }\r\n \r\n }\r\n \r\n-const User = require('../models/User');\r\n-\r\n-const jwt = require('jsonwebtoken')\r\n-const bcrypt = require('bcryptjs')\r\n-\r\n-exports.register = async  (req, res, next) => {\r\n-   try {\r\n-       const user = await User.create(req.body)\r\n-       const token = jwt.sign({userId: user._id}, process.env.APP_SECRECT);\r\n-       res.status(200).json({\r\n-           status: 'success',\r\n-           data: {token,\r\n-                  email: user.email,\r\n-                  userName: user.username\r\n-        }\r\n-       })\r\n-   } catch (error) {\r\n-      next(error)\r\n-   }\r\n-}\r\n-\r\n-exports.login = async (req, res, next) => {\r\n-    try {\r\n-        const user = await User.findOne({username: req.body.username})\r\n-        if(!user){\r\n-            //Error:  Email is not correct\r\n-            const err = new Error('Username is not correct !!');\r\n-            err.statusCode = 400;\r\n-            return next(err)\r\n-        }\r\n-        if(!user.status){\r\n-            //Error:  Email is not correct\r\n-            const err = new Error('your account is blocked !!');\r\n-            err.statusCode = 400;\r\n-            return next(err)\r\n-        }\r\n-        if(bcrypt.compareSync(req.body.password, user.password)){\r\n-            const token = jwt.sign({userId: user._id, userName:user.username}, process.env.APP_SECRECT);\r\n-            res.status(200).json({\r\n-                status:'success',\r\n-                data:{\r\n-                    token,\r\n-                    email: user.email,\r\n-                    userName: user.username\r\n-                }\r\n-            })\r\n-        }else{\r\n-            //Error: password is not correct\r\n-            const err = new Error('Password is not correct !!');\r\n-            err.statusCode = 400;\r\n-            return next(err)\r\n-        }\r\n-    } catch (error) {\r\n-        res.json(error)\r\n-    }\r\n-\r\n-}\r\n-\r\n-\r\n-// exports.register = async (req, res, next)=>{\r\n-//     try {\r\n-//             const user = await User.create(req.body)\r\n-//             res.status(200).json({\r\n-//                 status:'success',\r\n-//                 data:{user}\r\n-//             })\r\n-//     } catch (error) {\r\n-//         res.json(error)\r\n-//     }\r\n-// }\r\n-\r\n-// exports.login = (req, res, next)=>{\r\n-//     res.json('user login')\r\n-// }\r\n-\r\n-\r\n-//Get current User\r\n-\r\n-exports.getCurrentUser = async(req, res, next)=>{\r\n-    try {\r\n-        const data = {user:null};\r\n-        if(req.user){\r\n-            const user = await User.findOne({_id: req.user.userId});\r\n-            data.user= {userName: user.username}\r\n-        }\r\n-        res.status(200).json({\r\n-            status:'success',\r\n-            data: data,\r\n-        });\r\n-        console.log(data)\r\n-    } catch (error) {\r\n-        res.json(error);\r\n-    }\r\n-}\r\n-\r\n-\r\n-exports.getAllUsers = async (req, res, next) => {\r\n-    try {\r\n-        const user = await User.find({})\r\n-        res.status(200).json({\r\n-            status:'success',\r\n-            users: user\r\n-        })\r\n-    } catch (error) {\r\n-        res.json(error);\r\n-    }\r\n-}\r\n-\r\n-exports.updateUser = async (req, res, next) => {\r\n-    try {\r\n-        const{userId} = req.params;\r\n-        const user = await User.findByIdAndUpdate(userId,{...req.body},{new:true, runValidators:true})\r\n-        res.status(200).json({\r\n-            status:'success',\r\n-            data: {user}\r\n-        })\r\n-    } catch (error) {\r\n-        res.json(error);\r\n-    }\r\n-}\r\n-\r\n-exports.deleteUser = async (req, res, next) => {\r\n-    try {\r\n-        const{userId} = req.params;\r\n-        await User.findByIdAndDelete(userId)\r\n-        res.status(200).json({\r\n-            status:'success',\r\n-            message: 'Delete user successfully!'\r\n-        })\r\n-    } catch (error) {\r\n-        \r\n-    }\r\n-\r\n-}\r\n-exports.blockUser = async (req, res, next) => {\r\n-    try {\r\n-        const{userId} = req.params;\r\n-        await User.findByIdAndUpdate(userId,{status:false})\r\n-        res.status(200).json({\r\n-            status:'success',\r\n-            message: 'Update user successfully!'\r\n-        })\r\n-        } catch (error) {\r\n-            \r\n-        }\r\n-\r\n-}\r\n-\r\n-exports.unBlockUser = async (req, res, next) => {\r\n-    try {\r\n-        const{userId} = req.params;\r\n-        await User.findByIdAndUpdate(userId,{status:true})\r\n-        res.status(200).json({\r\n-            status:'success',\r\n-            message: 'UnBlock user successfully!'\r\n-        })\r\n-        } catch (error) {\r\n-            \r\n-        }\r\n-\r\n-}\r\n-\r\n"
                },
                {
                    "date": 1635324122567,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,12 +20,12 @@\n }\r\n \r\n exports.login = async (req, res, next) => {\r\n     try {\r\n-        const user = await User.findOne({username: req.body.username})\r\n+        const user = await User.findOne({email: req.body.email})\r\n         if(!user){\r\n             //Error:  Email is not correct\r\n-            const err = new Error('Username is not correct !!');\r\n+            const err = new Error('Email is not correct !!');\r\n             err.statusCode = 400;\r\n             return next(err)\r\n         }\r\n         if(!user.status){\r\n"
                },
                {
                    "date": 1635324231845,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n             err.statusCode = 400;\r\n             return next(err)\r\n         }\r\n         if(bcrypt.compareSync(req.body.password, user.password)){\r\n-            const token = jwt.sign({userId: user._id, userName:user.username, role:user.role}, process.env.APP_SECRECT);\r\n+            const token = jwt.sign({userId: user._id, email:user.email, role:user.role}, process.env.APP_SECRECT);\r\n             res.status(200).json({\r\n                 status:'success',\r\n                 data:{\r\n                     token,\r\n"
                },
                {
                    "date": 1635324643402,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n             err.statusCode = 400;\r\n             return next(err)\r\n         }\r\n         if(bcrypt.compareSync(req.body.password, user.password)){\r\n-            const token = jwt.sign({userId: user._id, email:user.email, role:user.role}, process.env.APP_SECRECT);\r\n+            const token = jwt.sign({userId: user._id, email:user.email,userName: user.username,, role:user.role}, process.env.APP_SECRECT);\r\n             res.status(200).json({\r\n                 status:'success',\r\n                 data:{\r\n                     token,\r\n"
                },
                {
                    "date": 1635953922513,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,164 @@\n+const User = require('../models/User');\r\n+\r\n+const jwt = require('jsonwebtoken')\r\n+const bcrypt = require('bcryptjs')\r\n+\r\n+exports.register = async  (req, res, next) => {\r\n+   try {\r\n+       const user = await User.create(req.body)\r\n+       const token = jwt.sign({userId: user._id}, process.env.APP_SECRECT);\r\n+       res.status(200).json({\r\n+           status: 'success',\r\n+           data: {token,\r\n+                  email: user.email,\r\n+                  userName: user.username\r\n+        }\r\n+       })\r\n+   } catch (error) {\r\n+      next(error)\r\n+   }\r\n+}\r\n+\r\n+exports.login = async (req, res, next) => {\r\n+    try {\r\n+        const user = await User.findOne({email: req.body.email})\r\n+        if(!user){\r\n+            //Error:  Email is not correct\r\n+            const err = new Error('Email is not correct !!');\r\n+            err.statusCode = 400;\r\n+            return next(err)\r\n+        }\r\n+        if(!user.status){\r\n+            //Error:  Email is not correct\r\n+            const err = new Error('your account is blocked !!');\r\n+            err.statusCode = 400;\r\n+            return next(err)\r\n+        }\r\n+        if(bcrypt.compareSync(req.body.password, user.password)){\r\n+            const token = jwt.sign({userId: user._id, email:user.email,userName: user.username, role:user.role}, process.env.APP_SECRECT);\r\n+            res.status(200).json({\r\n+                status:'success',\r\n+                data:{\r\n+                    token,\r\n+                    email: user.email,\r\n+                    userName: user.username,\r\n+                    role: user.role\r\n+                }\r\n+            })\r\n+        }else{\r\n+            //Error: password is not correct\r\n+            const err = new Error('Password is not correct !!');\r\n+            err.statusCode = 400;\r\n+            return next(err)\r\n+        }\r\n+    } catch (error) {\r\n+        res.json(error)\r\n+    }\r\n+\r\n+}\r\n+\r\n+\r\n+// exports.register = async (req, res, next)=>{\r\n+//     try {\r\n+//             const user = await User.create(req.body)\r\n+//             res.status(200).json({\r\n+//                 status:'success',\r\n+//                 data:{user}\r\n+//             })\r\n+//     } catch (error) {\r\n+//         res.json(error)\r\n+//     }\r\n+// }\r\n+\r\n+// exports.login = (req, res, next)=>{\r\n+//     res.json('user login')\r\n+// }\r\n+\r\n+\r\n+//Get current User\r\n+\r\n+exports.getCurrentUser = async(req, res, next)=>{\r\n+    try {\r\n+        const data = {user:null};\r\n+        if(req.user){\r\n+            const user = await User.findOne({_id: req.user.userId});\r\n+            data.user= {userName: user.username}\r\n+        }\r\n+        res.status(200).json({\r\n+            status:'success',\r\n+            data: data,\r\n+        });\r\n+        console.log(data)\r\n+    } catch (error) {\r\n+        res.json(error);\r\n+    }\r\n+}\r\n+\r\n+\r\n+exports.getAllUsers = async (req, res, next) => {\r\n+    try {\r\n+        const user = await User.find({})\r\n+        res.status(200).json({\r\n+            status:'success',\r\n+            results:user.length,\r\n+            users: user\r\n+        })\r\n+    } catch (error) {\r\n+        res.json(error);\r\n+    }\r\n+}\r\n+\r\n+exports.updateUser = async (req, res, next) => {\r\n+    try {\r\n+        const{userId} = req.params;\r\n+        const user = await User.findByIdAndUpdate(userId,{...req.body},{new:true, runValidators:true})\r\n+        res.status(200).json({\r\n+            status:'success',\r\n+            data: {user}\r\n+        })\r\n+    } catch (error) {\r\n+        res.json(error);\r\n+    }\r\n+}\r\n+\r\n+exports.deleteUser = async (req, res, next) => {\r\n+    try {\r\n+        const{userId} = req.params;\r\n+        await User.findByIdAndDelete(userId)\r\n+        res.status(200).json({\r\n+            status:'success',\r\n+            message: 'Delete user successfully!'\r\n+        })\r\n+    } catch (error) {\r\n+        \r\n+    }\r\n+\r\n+}\r\n+exports.blockUser = async (req, res, next) => {\r\n+    try {\r\n+        const{userId} = req.params;\r\n+        await User.findByIdAndUpdate(userId,{status:false})\r\n+        res.status(200).json({\r\n+            status:'success',\r\n+            message: 'Update user successfully!'\r\n+        })\r\n+        } catch (error) {\r\n+            \r\n+        }\r\n+\r\n+}\r\n+\r\n+exports.unBlockUser = async (req, res, next) => {\r\n+    try {\r\n+        const{userId} = req.params;\r\n+        await User.findByIdAndUpdate(userId,{status:true})\r\n+        res.status(200).json({\r\n+            status:'success',\r\n+            message: 'UnBlock user successfully!'\r\n+        })\r\n+        } catch (error) {\r\n+            \r\n+        }\r\n+\r\n+}\r\n+\r\n"
                }
            ],
            "date": 1633141361755,
            "name": "Commit-0",
            "content": "const User = require('../models/User');\r\n\r\nconst jwt = require('jsonwebtoken');\r\n\r\n const bcrypt = require('bcryptjs');\r\n\r\nexports.register = async  (req, res, next) => {\r\n   try {\r\n       const user = await User.create(req.body)\r\n       const token = jwt.sign({userId: user._id}, process.env.APP_SECRECT);\r\n       res.status(200).json({\r\n           status: 'success',\r\n           data: {token,\r\n                  MSSV: user.mssv,\r\n                  userName: user.username\r\n        }\r\n       })\r\n   } catch (error) {\r\n      next(error)\r\n   }\r\n}\r\n\r\nexports.login = async (req, res, next) => {\r\n    try {\r\n        const user = await User.findOne({email: req.body.email})\r\n        if(!user){\r\n            //Error:  Email is not correct\r\n        }\r\n        if(bcrypt.compareSync(req.body.password, user.password)){\r\n            const token = jwt.sign({userId: user._id}, process.env.APP_SECRECT);\r\n            res.status(200).json({\r\n                status:'success',\r\n                data:{\r\n                    token,\r\n                    email: user.email,\r\n                    userName: user.username\r\n                }\r\n            })\r\n        }else{\r\n            //Error: password is not correct\r\n        }\r\n    } catch (error) {\r\n        res.json(error)\r\n    }\r\n\r\n}\r\n"
        }
    ]
}